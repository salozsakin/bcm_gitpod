{"version":3,"sources":["webpack:///./components/components-overrides/box-links/box-links.scss","webpack:///./components/00-base/00-global/00-grid/_breakpoints.scss"],"names":[],"mappings":"AAGA,mBACE,4CAA6C,CAC9C,yBAGC,cAAe,CAChB,2KAIC,4CAA6C,CAC9C,sCAGC,iBAAkB,CACnB,UAGC,iBAAkB,CAClB,WAAY,CACb,YAGC,eAAgB,CAChB,6CAA8C,CAC9C,4CAA6C,CAC9C,iBAGC,eAAgB,CAChB,cAAe,CAChB,iBAGC,0CAA2C,CAC3C,wBAAkC,CAAlC,iCAAkC,CAClC,gCAAiC,CACjC,sBAAuB,CACxB,gBAGC,UAAO,CAAP,2BAA4B,CAC7B,kCAGC,YAAa,CACd,uBAGC,iBAAkB,CAClB,KAAM,CACN,OAAQ,CACR,QAAS,CACT,MAAO,CACP,UAAW,CACZ,yIAMG,SAAU,CAHd,iLAOI,yBAA0B,CAC1B,4BAA6B,CAC9B,0BATH,yGAYI,gBAAiB,CAZrB,yIAeM,oCAAqC,CACrC,mCAAoC,CAhB1C,iLAoBM,gCAAiC,CACjC,mCAAoC,CACrC,CCrBD,0BDDJ,yGA0BI,gBAAiB,CA1BrB,yIA6BM,4BAA6B,CAC7B,2BAA4B,CAC7B,CC9BD,0BDmCF,0EACE,qBAAM,CAAN,iBAAkB,CACnB,+DAGC,gBAAM,CAAN,YAAa,CACd,CAIH,0CACE,wBAAkB,CAAlB,mCAAoC","file":"box-links.css","sourcesContent":["@import '../../00-base/00-global/00-grid/_breakpoints.scss';\n@import '../../00-base/00-global/_02-breakpoints.scss';\n\n.box-links-listing {\n  margin-bottom: var(--vertical-rhythm-spacing);\n}\n\n.box-links-listing__list {\n  padding-left: 0;\n}\n\n.box-links-listing--boxes .box-links-listing__list-item + .box-links-listing__list-item,\n.box-links-listing__list .box-links-listing__list-item + .box-links-listing__list-item {\n  margin-bottom: var(--vertical-rhythm-spacing);\n}\n\n.box-links-listing__list-item::marker {\n  color: transparent;\n}\n\n.box-link {\n  position: relative;\n  border: none;\n}\n\n.box-link > * {\n  margin-bottom: 0;\n  padding-right: var(--box-link-content-spacing);\n  padding-left: var(--box-link-content-spacing);\n}\n\n.box-link__image {\n  padding-right: 0;\n  padding-left: 0;\n}\n\n.box-link__title {\n  margin-top: var(--box-link-content-spacing);\n  background-color: var(--c-primary);\n  font-size: var(--font-size-large);\n  padding: var(--spacing);\n}\n\n.box-link__link {\n  color: var(--c-text-inverse);\n}\n\n.box-link__image + .box-link__title {\n  margin-top: 0;\n}\n\n.box-link__link::after {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  content: \"\";\n}\n\n// Layout variations\n.paragraph--type--page-section .layout--threecol-33-34-33,\n.paragraph--type--page-section .layout--twocol, {\n  & > .layout__region {\n    padding: 0;\n  }\n\n  .paragraph--type--localgov-box-link {\n    margin-top: var(--spacing);\n    margin-bottom: var(--spacing);\n  }\n\n  @include medium {\n    margin: 0 -0.8rem;\n\n    & > .layout__region {\n      padding-right: var(--spacing-smaller);\n      padding-left: var(--spacing-smaller);\n    }\n\n    .paragraph--type--localgov-box-link {\n      margin-top: var(--spacing-larger);\n      margin-bottom: var(--spacing-larger);\n    }\n  }\n\n  @include large {\n    margin: 0 -1.6rem;\n\n    & > .layout__region {\n      padding-right: var(--spacing);\n      padding-left: var(--spacing);\n    }\n  }\n}\n\n@include medium {\n  .paragraph--type--page-section .layout--threecol-33-34-33 .layout__region {\n    flex: 0 1 33.3333%;\n  }\n\n  .paragraph--type--page-section .layout--twocol .layout__region {\n    flex: 0 1 50%;\n  }\n}\n\n// Color variations\n.localgov-box-link--teal .box-link__title {\n  background-color: var(--c-secondary);\n}\n","/* stylelint-disable */\n\n// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - 0.02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n"],"sourceRoot":""}