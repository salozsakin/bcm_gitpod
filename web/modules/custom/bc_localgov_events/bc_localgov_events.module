<?php

use Drupal\views\ViewExecutable;

/**
 * Implements hook_views_pre_render().
 *
 * Aggregates multi-day events into one result.
 *
 * @param ViewExecutable $view
 * @throws Exception
 */
function localgov_events_views_pre_render(ViewExecutable $view) {
  // Only run on a specific view for now.
  if ($view->id() === 'localgov_events_listing') {
    // Save original results to loop through them.
    $original_results = $view->result;
    // Create array for storing unique events.
    $unique_events = [];
    // Temporary index to fix order later.
    $index = -1;
    foreach ($original_results as $result) {
      // Get the node ID for comparing how many unique events are.
      $nid = $result->nid;
      // Save both start and end date to change how they display on the results page.
      $start_date = $result->date_recur__node__localgov_event_date_node_field_data_localg;
      $end_date = $result->date_recur__node__localgov_event_date_node_field_data_localg_1;
      // If a unique event doesn't exist already, add it.
      if (!array_key_exists($result->nid, $unique_events)) {
        $unique_events[$result->nid] = $result;
      }
      // If the current element (event) of the loop already exists within the unique events,
      // compare the date to see if the end date is further in the future than the current
      // saved one, if the case, update that to have the future end date.
      else {
        $old_end_date = new DateTime($unique_events[$nid]->date_recur__node__localgov_event_date_node_field_data_localg_1);
        $new_end_date = new DateTime($end_date);
        if ($new_end_date > $old_end_date) {
          $unique_events[$nid]->date_recur__node__localgov_event_date_node_field_data_localg_1 = $end_date;
        }
      }
    }
    // Fix index elements to correctly display all events.
    $final_results = [];
    foreach ($unique_events as $unique_event){
      ++$index;
      $unique_event->index = $index;
      array_push($final_results, $unique_event);
    }
    // Set the modified results into the views' result.
    $view->result = $final_results;
    $view->total_rows = (string) count($final_results);
  }
}
