<?php

/**
 * @file
 * Hook functions for bc_localgov_events.
 */
use Drupal\Core\Form\FormStateInterface;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_form_views_exposed_form_alter().
 * @param $form
 * @param FormStateInterface $form_state
 * @param $form_id
 */
function bc_localgov_events_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $view = $form_state->getStorage('view');
  if ($form_id == 'views_exposed_form' && $view['view']->id() == 'localgov_events_listing') {
    $form['pick_a_date'] = [
      '#type' => 'date',
      '#title' => t('Pick a date'),
      '#date_date_element' => 'date',
    ];

  }
}


/**
 * Implements hook_views_query_alter().
 * @param ViewExecutable $view
 */
function bc_localgov_events_views_pre_view(ViewExecutable $view) {
  if ($view->id() == 'localgov_events_listing') {
    // Get user exposed input.
    $filters = $view->getExposedInput();
    if (isset($filters['pick_a_date']) && $filters['pick_a_date'] != '') {
      $filters['start'] = $filters['pick_a_date'];

      // Add one day to end date so events for that day are included.
      $filters['end'] = date('Y-m-d', strtotime($filters['pick_a_date'] . ' + 1 days'));
      $filters['dates'] = 'choose';

      // Update user exposed input with date logic above.
      $view->setExposedInput($filters);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for the FORM_ID() form.
 * @param $form
 * @param FormStateInterface $form_state
 * @param $form_id
 */
function bc_localgov_events_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // All localgov event forms should be added here.
  $event_forms = [
    'node_localgov_event_form',
    'node_localgov_event_edit_form'
  ];
  // If current form is one of the above, add custom validation.
  if (in_array($form_id, $event_forms, true)) {
    $form['#validate'][] = '_bc_localgov_events_form_validate';
  }
}

/**
 * Validates submission values in the bc_localgov_events_form_alter() function.
 * @param array $form
 * @param FormStateInterface $form_state
 */
function _bc_localgov_events_form_validate(array &$form, FormStateInterface $form_state) {
  // Check if the form actually has the value - It should but just in case it doesnt skip custom validation.
  if ($form_state->hasValue('localgov_event_date')) {
    // Get the event dates from the form_state.
    $event_dates = $form_state->getValue('localgov_event_date');
    $event_dates = reset($event_dates);

    // Get start and end DateTime objects.
    $date_start = $event_dates['start'];
    $date_end = $event_dates['end'];

    // Get the different in epoch between end and start dates.
    $diff = $date_end->getTimestamp() - $date_start->getTimestamp();

    // If the time difference is positive we dont even need to error because it will be picked up by standard Date
    // validation, f the difference is less than a minute, error on that field.
    if ($diff >= 0 && $diff < 60) {
      $form_state->setErrorByName('localgov_event_date][0][end][time', t('The event duration is less than a minute!'));
    }
  }
}

