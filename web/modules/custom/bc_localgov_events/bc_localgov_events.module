<?php

use Drupal\node\Entity\Node;
use Drupal\views\ViewExecutable;
use Drupal\node\NodeInterface;
use RRule\RRule;
use RRule\RSet;

/**
 * Implements hook_preprocess_node().
 *
 * Prepares data to display on the event page with the current or
 * next occurrence of the event.
 *
 * @param $variables
 * @throws Exception
 */
function bc_localgov_events_preprocess_node(&$variables) {
  // Get the node object for the current page.
  /** @var Node $node */
  $node = $variables['node'];
  if (!is_null($node)) {
    // Only do logic for event-type nodes.
    $content_types = [
      'localgov_event',
    ];
    if (in_array($node->bundle(), $content_types, true)) {
      // Check if the field has an actual event_date, if not, do nothing.
      if ($node->hasField('localgov_event_date')) {
        // Get the node rrule string for the RRule object.
        $rrule_string = $node->get('localgov_event_date')->rrule;
        // Get the node start and end dates.
        $date_start = $node->get('localgov_event_date')->value;
        $date_end = $node->get('localgov_event_date')->end_value;

        // In case the event is not recurring, just returning the earliest start date.
        if (is_null($rrule_string)) {
          $datetime_start = new DateTime($date_start);
          $variables['next_occurrence'] = $datetime_start->format('l jS F Y');
          return;
        }

        // Build the RRule object with the recurrence string and date start.
        $rrule = new RRule($rrule_string, $date_start);
        // Get all the possible occurrences that are parsed from the rrule string.
        $rrule_occurrences = $rrule->getOccurrences();
        // Find the last possible event occurrance date.
        $last_occurrence = end($rrule_occurrences);
        // Format the last date for comparison purposes.
        $last_occurrence_date = $last_occurrence->format('Y-m-d');

        // Get todays date.
        $today = date('Y-m-d');
        // For future-proofing, check if event occurs today.
        $occurring_today = $rrule->occursAt($today);
        // For future-proofing, check how many total events are.
        $calculated_occurrences = $rrule->count();
        // Get the next event occurrence from today to the last day.
        $future_occurrences = $rrule->getOccurrencesBetween($today, $last_occurrence_date);

        // If we cant find the future occurrence, just display the last occurrence formatted.
        if (empty($future_occurrences)) {
          $variables['next_occurrence'] = $last_occurrence->format('l jS F Y');
        }
        // Get the first next future occurrence date and format it.
        else {
          $variables['next_occurrence'] = reset($future_occurrences)->format('l jS F Y');
        }
      }
    }
  }
}

/**
 * Implements hook_views_pre_render().
 *
 * Aggregates multi-day events into one result.
 *
 * @param ViewExecutable $view
 * @throws Exception
 */
function localgov_events_views_pre_render(ViewExecutable $view) {
  // Only run on a specific view for now.
  if ($view->id() === 'localgov_events_listing') {
    // Save original results to loop through them.
    $original_results = $view->result;
    // Create array for storing unique events.
    $unique_events = [];
    // Temporary index to fix order later.
    $index = -1;
    foreach ($original_results as $result) {
      // Get the node ID for comparing how many unique events are.
      $nid = $result->nid;
      // Save both start and end date to change how they display on the results page.
      $start_date = $result->date_recur__node__localgov_event_date_node_field_data_localg;
      $end_date = $result->date_recur__node__localgov_event_date_node_field_data_localg_1;
      // If a unique event doesn't exist already, add it.
      if (!array_key_exists($result->nid, $unique_events)) {
        $unique_events[$result->nid] = $result;
      }
      // If the current element (event) of the loop already exists within the unique events,
      // compare the date to see if the end date is further in the future than the current
      // saved one, if the case, update that to have the future end date.
      else {
        $old_end_date = new DateTime($unique_events[$nid]->date_recur__node__localgov_event_date_node_field_data_localg_1);
        $new_end_date = new DateTime($end_date);
        if ($new_end_date > $old_end_date) {
          $unique_events[$nid]->date_recur__node__localgov_event_date_node_field_data_localg_1 = $end_date;
        }
      }
    }
    // Fix index elements to correctly display all events.
    $final_results = [];
    foreach ($unique_events as $unique_event){
      ++$index;
      $unique_event->index = $index;
      array_push($final_results, $unique_event);
    }
    // Set the modified results into the views' result.
    $view->result = $final_results;
    $view->total_rows = (string) count($final_results);
  }
}
