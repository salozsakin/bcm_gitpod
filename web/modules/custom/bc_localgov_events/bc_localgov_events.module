<?php

use Drupal\node\Entity\Node;
use Drupal\views\ViewExecutable;
use Drupal\node\NodeInterface;
use RRule\RRule;
use RRule\RSet;

/**
 * Implements hook_preprocess_node().
 *
 * Prepares data to display on the event page with the current or
 * next occurrence of the event.
 *
 * @param $variables
 * @throws Exception
 */
function bc_localgov_events_preprocess_node(&$variables) {
  // Get the node object for the current page.
  /** @var Node $node */
  $node = $variables['node'];
  if (!is_null($node)) {
    // Only do logic for event-type nodes.
    $content_types = [
      'localgov_event',
    ];
    if (in_array($node->bundle(), $content_types, true)) {
      // Check if the field has an actual event_date, if not, do nothing.
      if ($node->hasField('localgov_event_date')) {
        // Get the node rrule string for the RRule object.
        $rrule_string = $node->get('localgov_event_date')->rrule;
        // Get the node start and end dates.
        $date_start = $node->get('localgov_event_date')->value;
        $date_end = $node->get('localgov_event_date')->end_value;

        // In case the event is not recurring, just returning the earliest start date.
        if (is_null($rrule_string)) {
          $datetime_start = new DateTime($date_start);
          $variables['next_occurrence'] = $datetime_start->format('l jS F Y');
          return;
        }

        // Remove Z character at the end of the recuring str as RRule doesnt like that,
        // having that will cause a fatal error because $date_start doesnt have the Z.
        if (str_ends_with($rrule_string, 'Z')) {
          $rrule_string = rtrim($rrule_string, 'Z');
        }

        // Build the RRule object with the recurrence string and date start.
        $rrule = new RRule($rrule_string, $date_start);
        if ($rrule->isFinite()) {
          // Get all the possible occurrences that are parsed from the rrule string.
          $rrule_occurrences = $rrule->getOccurrences();
          // Find the last possible event occurrance date.
          $last_occurrence = end($rrule_occurrences);
          // Format the last date for comparison purposes.
          $last_occurrence_date = $last_occurrence->format('Y-m-d');

          // Get todays date.
          $today = date('Y-m-d');
          // For future-proofing, check if event occurs today.
          $occurring_today = $rrule->occursAt($today);
          // For future-proofing, check how many total events are.
          $calculated_occurrences = $rrule->count();
          // Get the next event occurrence from today to the last day.
          $future_occurrences = $rrule->getOccurrencesBetween($today, $last_occurrence_date);

          // If we cant find the future occurrence, just display the last occurrence formatted.
          if (empty($future_occurrences)) {
            $variables['next_occurrence'] = $last_occurrence->format('l jS F Y');
          }
          // Get the first next future occurrence date and format it.
          else {
            $variables['next_occurrence'] = reset($future_occurrences)->format('l jS F Y');
          }
        }
      }
    }
    if ($node->hasField('localgov_event_categories') && !$node->get('localgov_event_categories')->isEmpty()) {
      /** @var \Drupal\taxonomy\TermInterface[] $categories_terms */
      $categories_terms = $node->get('localgov_event_categories')->referencedEntities();
      $variables['category_links'] = [];
      foreach ($categories_terms as $categories_term) {
        $url = \Drupal\Core\Url::fromRoute('view.localgov_events_listing.page_all_events', [
          'categories' => $categories_term->id(),
        ]);
        $variables['category_links'][] = [
          '#type' => 'link',
          '#title' => $categories_term->getName(),
          '#url' => $url,
        ];
      }
    }
  }
}

/**
 * Implements hook_form_views_exposed_form_alter().
 */
function bc_localgov_events_form_views_exposed_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $view = $form_state->getStorage('view');
  if ($form_id == 'views_exposed_form' && $view['view']->id() == 'localgov_events_listing') {
    $form['pick_a_date'] = [
      '#type' => 'date',
      '#title' => t('Pick a date'),
      '#date_date_element' => 'date',
    ];
  }
}


/**
 * Implements hook_views_query_alter().
 */
function bc_localgov_events_views_pre_view(ViewExecutable $view) {
  if ($view->id() == 'localgov_events_listing') {
    $filters = $view->getExposedInput();
    if (isset($filters['pick_a_date']) && $filters['pick_a_date'] != '') {
      $filters['start'] = $filters['pick_a_date'];
      $filters['end'] = date('Y-m-d', strtotime($filters['pick_a_date'] . ' + 1 days'));
      $filters['dates'] = 'choose';
      $view->setExposedInput($filters);
    }
  }
}

/**
 * Implements hook_preprocess_field__localgov_event_date().
 */
function bc_localgov_events_preprocess_field__localgov_event_date(&$variables) {
  if (isset($variables['items'][0]['content']['#occurrences'])) {
    foreach ($variables['items'][0]['content']['#occurrences'] as &$item) {
      $start_timestamp = strtotime($item['start_date']['#text']);
      $item['start_date']['#text'] = date('l jS F Y', $start_timestamp);
      $item['end_date']['#text'] = date('g.ia', $start_timestamp) . $item['separator']['#plain_text'] . $item['end_date']['#text'];
      unset($item['separator']);
    }
  }
}
